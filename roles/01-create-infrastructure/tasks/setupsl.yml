---

  - name: Check to see if pip is already installed.
    command: " pip --version"
    ignore_errors: false
    changed_when: false # read-only task
    check_mode: no
    register: pip_is_installed

  - name: Ensure a list of packages installed
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - gcc 
      - gcc-c++ 
      - python-devel 
      - cairo-devel 
      - gobject-introspection-devel 
      - cairo-gobject-devel 
      - ansible
    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: installing all the required library
    pip:
      name: 
        - ansible>=2.7
        - pexpect
        - asn1crypto>=0.24.0
        - cryptography>=2.1.4
        - enum34>=1.1.6
        - httplib2>=0.9.2
        - idna>=2.6
        - ipaddress>=1.0.17
        - Jinja2>=2.10
        - keyring>=10.6.0
        - keyrings.alt>=3.0
        -  MarkupSafe>=1.0
        - paramiko>=2.0.0
        - pyasn1>=0.4.2
        - pycrypto>=2.6.1
        - pygobject>=3.26.1
        - pyxdg>=0.25
        - PyYAML>=3.12
        - SecretStorage>=2.3.1
        - six>=1.11.0
        - softlayer
      state: forcereinstall
        
  - name: Check to see if slcli is already installed.
    command: " slcli --version"
    ignore_errors: false
    changed_when: false # read-only task
    check_mode: no
    register: slcli_is_installed

  - name: Check to see if rsa key pair exist.
    stat: 
      path: "{{role_path}}/../../artifacts/sl_ssh_rsa"
    register: ssl_rsa_file

  - name: fail if file does not exist
    fail: msg="The rsa file were not copied into artifacts directory, please copy the file and run the playbook again"
    when: ssl_rsa_file.stat.exists == false

  - name: Check to see if rsa key pair exist.
    stat: 
      path: "{{role_path}}/../../artifacts/sl_ssh_rsa.pub"
    register: ssl_rsa_file

  - name: fail if file does not exist
    fail: msg="The rsa pub file were not copied into artifacts directory, please copy the file and run the playbook again"
    when: ssl_rsa_file.stat.exists == false

  - name: Change file ownership, group and permissions
    file:
      path: "{{role_path}}/../../artifacts/sl_ssh_rsa"
      mode: '0600'
  - name: Write out  softlayer config file 
    template:
      src: "{{ role_path }}/templates/.softlayer.j2"
      dest: "{{ role_path }}/files/.softlayer"

  
  - name: Set Facts for softlayer configuration path
    set_fact: softlayer_conf="{{ role_path }}/files/.softlayer"

  - name: If follow=yes, create a link to softlayer config file
    copy:
      src: "{{ softlayer_conf }}"
      remote_src: yes
      dest: ~/  # link to /path/to/file
      follow: yes
  

  - name: get the ssh keyid by name ocp-key
    register: contentof_all_sl_sshkeys
    shell: "slcli  sshkey list | grep ocp-key"
    ignore_errors: true
  
  #- debug: var=contentof_all_sl_sshkeys.stdout_lines
 
  - set_fact:
      all_sl_ocp_key: "{{ contentof_all_sl_sshkeys.stdout_lines }}"
  
  - name: go throuhg all the previous ocp-key and delete it before adding it
    shell: slcli  -y sshkey remove {{item.split(" ")[0]}}
    with_items: "{{ all_sl_ocp_key }}"
   
  - name: adding sshkey to the softlayer
    command: "slcli sshkey add -f {{role_path}}/../../artifacts/sl_ssh_rsa.pub ocp-key"
  
  
  - name: get the ssh keyid
    register: contentof_sl_sshkeys
    shell: "slcli  sshkey list"
   
  
  - debug:
      msg: "{{ contentof_sl_sshkeys.stdout_lines | list }}"

  - name: get the vlan id using vlan number
    register: contentof_sl_vlan_id
    shell: "slcli vlan list | grep {{ sl_datacenter }} | grep {{ sl_private_vlan }} | awk '{print $1}'"
  
  - name: Fact variabe for vlan id 
    set_fact:
      sl_vlan_id: "{{ contentof_sl_vlan_id.stdout }}"
  
  - debug:
      msg: "{{ contentof_sl_vlan_id }}"
